// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model User {
  id       String  @id @default(cuid())
  username String?

  email         String    @unique
  emailVerified DateTime?
  password      String?
  name          String?
  firstName     String?
  lastName      String?

  image String?

  warehouseId String?
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])

  storeId String?
  store   Store?  @relation(fields: [storeId], references: [id])

  role Role @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Account       Account[]
  Session       Session[]
  Authenticator Authenticator[]
}

model Warehouse {
  id        String    @id @default(cuid())
  name      String // Nama gudang
  code      String    @unique // Kode unik gudang
  location  String? // Lokasi gudang (e.g., alamat)
  capacity  Int? // Kapasitas maksimum gudang (opsional)
  isActive  Boolean   @default(true) // Status aktif gudang
  createdAt DateTime  @default(now()) // Tanggal pembuatan
  updatedAt DateTime  @updatedAt // Tanggal terakhir diperbarui
  User      User[]
  Product   Product[]
  Stock     Stock[]

  @@map("warehouses")
}

model Store {
  id        String   @id @default(cuid())
  name      String // Nama toko
  code      String   @unique // Kode unik toko
  location  String? // Lokasi toko (e.g., alamat)
  isActive  Boolean  @default(true) // Status aktif toko
  createdAt DateTime @default(now()) // Tanggal pembuatan
  updatedAt DateTime @updatedAt // Tanggal terakhir diperbarui

  Product Product[]
  Stock   Stock[]
  User    User[]

  @@map("stores")
}

model Member {
  id      String @id @default(cuid())
  name    String
  email   String
  phone   String
  address String

  createdAt DateTime  @default(now()) // Tanggal pembuatan
  updatedAt DateTime  @updatedAt // Tanggal terakhir diperbarui
  Order     Order[]
  Invoice   Invoice[]

  @@map("members")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  sku         String?  @unique
  tags        String[] @default([])

  isActive Boolean @default(true)
  discount Float? // Diskon dalam persentase
  imageUrl String? // URL gambar produk

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  orderItems OrderItem[]

  promoId   String?
  promo     Promo?   @relation(fields: [promoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  storeId String?
  store   Store?  @relation(fields: [storeId], references: [id])

  Stock Stock[]

  Variant        Variant[]
  Logistics      Logistics[]
  WholesalePrice WholesalePrice[]

  @@map("products")
}

model Variant {
  id             String             @id @default(cuid())
  name           String
  product        Product            @relation(fields: [productId], references: [id])
  productId      String
  attributes     VariantAttribute[] // Relasi ke tabel VariantAttribute
  WholesalePrice WholesalePrice[]

  @@map("variant")
}

model VariantAttribute {
  id             String           @id @default(cuid())
  variant        Variant          @relation(fields: [variantId], references: [id])
  variantId      String
  name           String
  Price          String
  Stock          Stock[]
  WholesalePrice WholesalePrice[]

  @@map("variant_attribute")
}

model Stock {
  id String @id @default(cuid())

  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId String?

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String?

  quantity Int @default(0) // Jumlah stok di lokasi ini

  Product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  variantAttributeId String?
  VariantAttribute   VariantAttribute? @relation(references: [id], fields: [variantAttributeId])

  productId String?
}

model WholesalePrice {
  id String @id @default(cuid())

  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  variant   Variant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String?

  variantAttributeId String?
  variantAttribute   VariantAttribute? @relation(fields: [variantAttributeId], references: [id], onDelete: Cascade)

  minQuantity Int // Jumlah minimum pembelian
  price       Float // Harga per unit untuk pembelian grosir
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  isActive  Boolean  @default(true)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

model MemberType {
  id    String  @id @default(cuid())
  name  String
  Promo Promo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("member_type")
}

model Promo {
  id           String      @id @default(cuid())
  name         String
  description  String?
  memberTypeId String?
  memberType   MemberType? @relation(fields: [memberTypeId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@map("prommo")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique // Nomor unik untuk pesanan
  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id])
  orderItems  OrderItem[]
  totalAmount Float // Total harga pesanan
  status      OrderStatus @default(PENDING) // Status pesanan
  memberId    String?
  member      Member?     @relation(fields: [memberId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Invoice     Invoice[]
  Logistics   Logistics[]

  @@map("orders")
}

model OrderItem {
  id String @id @default(cuid())

  orderId   String
  productId String

  product_name String

  quantity Int // Jumlah produk dalam pesanan

  price      Float
  unitPrice  Float // Harga satuan saat pesanan dibuat
  discount   Float? // Diskon untuk item
  totalPrice Float // Harga total untuk item setelah diskon

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique // Nomor faktur
  orderId       String
  order         Order         @relation(fields: [orderId], references: [id])
  issuedAt      DateTime      @default(now()) // Tanggal faktur diterbitkan
  dueDate       DateTime // Tanggal jatuh tempo
  status        InvoiceStatus @default(UNPAID) // Status pembayaran faktur
  totalAmount   Float // Total pembayaran
  memberId      String?
  member        Member?       @relation(fields: [memberId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("invoices")
}

model Logistics {
  id              String       @id @default(cuid())
  transactionType LogisticType

  sourceId      String // ID sumber: ID gudang atau ID toko
  destinationId String? // ID tujuan: ID toko atau ID pembeli

  productId String // ID produk
  orderId   String?

  quantity Int // Jumlah produk yang dikirim

  shippedAt   DateTime? // Waktu pengiriman
  deliveredAt DateTime? // Waktu diterima (opsional)

  status LogisticStatus @default(PENDING)
  notes  String? // Catatan tambahan (opsional)

  product Product @relation(references: [id], fields: [productId])
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERY
  COMPLETED
  CANCELED
  FAILED
}

enum InvoiceStatus {
  UNPAID
  PAID
  OVERDUE
}

enum LogisticType {
  WAREHOUSE_TO_STORE
  STORE_TO_WAREHOUSE
  WAREHOUSE_TO_WAREHOUSE
  STORE_TO_STORE
  WAREHOUSE_TO_END_USER
  STORE_TO_ENDUSER
}

enum LogisticStatus {
  PENDING
  SHIPPED
  DELIVERED
  FAILED
  CANCELED
}

enum Role {
  SUPERADMIN
  ADMIN
  MODERATOR
  USER
}
